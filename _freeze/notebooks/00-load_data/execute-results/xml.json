{
  "hash": "ea758497262dba449490fe406b40ab3a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Load, tidy and save data\nauthor: Andreas Svendsen\n---\n\n\n\n\nPreamble\n\nLoad our count matrix, gene annotation, and sample information. - Tidy the data - Create our DGEList object. Save this processed data in the output data folder\n\n#### Libraries\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(data.table)\nlibrary(RColorBrewer)\nlibrary(limma)\nlibrary(edgeR)\n```\n:::\n\n\n\n\n#### Load data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# Load the count expression matrix. Rows represents genes, and columns samples.\n\nexpression_raw <- fread(\"inputs/data_raw/expression.txt\")\nexpression_raw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         S1   S2   S5   S6   S7   S8  S11  S12  S13  S14  S15  S16 S17  S18\n    1: 1327 1322 1105 2569 2696 1513 1597 1107 1681 1751 1709 1447 944 1324\n    2:    0    0    0    2    0    2    0    0    1    0    0    0   1    0\n    3:  545  607  478 1041  694  480  644  530  620  583  866  933 569  843\n    4:  414  482  351  778  786  529  443  429  689  684  544  544 190  411\n    5:   73   49   42  117  116   83   73   53   79  118   84   93  34   65\n   ---                                                                     \n62706:    0    0    0    0    0    0    0    0    0    0    0    0   0    0\n62707:    0    0    0    0    0    0    0    0    0    0    0    0   0    0\n62708:    0    0    0    0    0    0    0    0    0    0    0    0   0    0\n62709:    6   27    6   10   11    2    8    4    6    3   14    4  14   20\n62710:    0    6    1    6   12    5    2    5    3    9    8   10   1    6\n        S19  S20\n    1: 3266 1193\n    2:    8    1\n    3: 1509  587\n    4:  820  293\n    5:  108   55\n   ---          \n62706:    0    0\n62707:    0    0\n62708:    0    0\n62709:    8    6\n62710:   12   10\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# Load the sample information file\nsample_info <- fread(\"inputs/data_raw/info.txt\")\nsample_info\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          treatment sample_name replicate group\n 1: Vehicle_control    AS0018_1         1     1\n 2: Vehicle_control    AS0018_2         2     1\n 3:   01_ng_ml_IL_6    AS0018_5         1     2\n 4:   01_ng_ml_IL_6    AS0018_6         2     2\n 5:   10_ng_ml_IL_6    AS0018_7         1     3\n 6:   10_ng_ml_IL_6    AS0018_8         2     3\n 7:  01_ng_ml_IL_1B   AS0018_11         1     4\n 8:  01_ng_ml_IL_1B   AS0018_12         2     4\n 9:  10_ng_ml_IL_1B   AS0018_13         1     5\n10:  10_ng_ml_IL_1B   AS0018_14         2     5\n11:             Rif   AS0018_15         1     6\n12:             Rif   AS0018_16         2     6\n13:             Abe   AS0018_17         1     7\n14:             Abe   AS0018_18         2     7\n15:          Medium   AS0018_19         1     8\n16:          Medium   AS0018_20         2     8\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# Load the gene annotation file\nannotation_info <- fread(\"inputs/data_raw/annotation.txt\")\nannotation_info\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           ENSEMBLE_ID          symbol\n    1: ENSG00000000003          TSPAN6\n    2: ENSG00000000005            TNMD\n    3: ENSG00000000419            DPM1\n    4: ENSG00000000457           SCYL3\n    5: ENSG00000000460        C1orf112\n   ---                                \n62706: ENSG00000291313 ENSG00000291313\n62707: ENSG00000291314 ENSG00000291314\n62708: ENSG00000291315 ENSG00000291315\n62709: ENSG00000291316 ENSG00000291316\n62710: ENSG00000291317         TMEM276\n```\n\n\n:::\n:::\n\n\n\n\n#### Tidy data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# Convert counts data to matrix. Mostly because of convension, but also for\n# performance reasons. However, EdgeR do allow DFs now.\nexpression_raw <- as.matrix(expression_raw)\n\n# Add a color designating group _color column to the sample info\ncolor_scheme <-\n  brewer.pal(\n    n = length(unique(sample_info$treatment)), # n colors = unique treatments\n    name = \"Paired\" # Palette name to get the color hexadecimal number from.\n  )\n\n# Add hexidecimal for black and put first in the vector.\ncolor_scheme <- append(color_scheme, values = \"#000000\", after = 0)\n# Remove the last hexadecimal color code, so we are back to one color/treatment\ncolor_scheme <- color_scheme[-9]\ncolor_scheme # Looks good. 8 color codes for 8 treatments\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"#000000\" \"#A6CEE3\" \"#1F78B4\" \"#B2DF8A\" \"#33A02C\" \"#FB9A99\" \"#E31A1C\"\n[8] \"#FDBF6F\"\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# label the values with in the color scheme object with the treatments names:\ncolor_scheme <- setNames(\n  object = color_scheme,\n  nm = unique(sample_info$treatment)\n)\ncolor_scheme # Each color code named by a treatment.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nVehicle_control   01_ng_ml_IL_6   10_ng_ml_IL_6  01_ng_ml_IL_1B  10_ng_ml_IL_1B \n      \"#000000\"       \"#A6CEE3\"       \"#1F78B4\"       \"#B2DF8A\"       \"#33A02C\" \n            Rif             Abe          Medium \n      \"#FB9A99\"       \"#E31A1C\"       \"#FDBF6F\" \n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# Subset the color_scheme vector by the treatment col. Add the resulting string\n# to a group_color column:\nsample_info$group_color <- color_scheme[sample_info$treatment]\nsample_info # Looks good\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          treatment sample_name replicate group group_color\n 1: Vehicle_control    AS0018_1         1     1     #000000\n 2: Vehicle_control    AS0018_2         2     1     #000000\n 3:   01_ng_ml_IL_6    AS0018_5         1     2     #A6CEE3\n 4:   01_ng_ml_IL_6    AS0018_6         2     2     #A6CEE3\n 5:   10_ng_ml_IL_6    AS0018_7         1     3     #1F78B4\n 6:   10_ng_ml_IL_6    AS0018_8         2     3     #1F78B4\n 7:  01_ng_ml_IL_1B   AS0018_11         1     4     #B2DF8A\n 8:  01_ng_ml_IL_1B   AS0018_12         2     4     #B2DF8A\n 9:  10_ng_ml_IL_1B   AS0018_13         1     5     #33A02C\n10:  10_ng_ml_IL_1B   AS0018_14         2     5     #33A02C\n11:             Rif   AS0018_15         1     6     #FB9A99\n12:             Rif   AS0018_16         2     6     #FB9A99\n13:             Abe   AS0018_17         1     7     #E31A1C\n14:             Abe   AS0018_18         2     7     #E31A1C\n15:          Medium   AS0018_19         1     8     #FDBF6F\n16:          Medium   AS0018_20         2     8     #FDBF6F\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# Convert grouping variables to factors for proper plotting later on.\nsample_info[, `:=`(\n  group = factor(group, levels = unique(group)),\n  treatment = factor(treatment, levels = unique(treatment)),\n  group_color = factor(group_color, levels = unique(group_color))\n)]\nstr(sample_info)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nClasses 'data.table' and 'data.frame':\t16 obs. of  5 variables:\n $ treatment  : Factor w/ 8 levels \"Vehicle_control\",..: 1 1 2 2 3 3 4 4 5 5 ...\n $ sample_name: chr  \"AS0018_1\" \"AS0018_2\" \"AS0018_5\" \"AS0018_6\" ...\n $ replicate  : int  1 2 1 2 1 2 1 2 1 2 ...\n $ group      : Factor w/ 8 levels \"1\",\"2\",\"3\",\"4\",..: 1 1 2 2 3 3 4 4 5 5 ...\n $ group_color: Factor w/ 8 levels \"#000000\",\"#A6CEE3\",..: 1 1 2 2 3 3 4 4 5 5 ...\n - attr(*, \".internal.selfref\")=<externalptr> \n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# Add ensemble_id concatenated with gene symbol to the annotation dataframe\nannotation_info[, id_symbol := paste(ENSEMBLE_ID, symbol, sep = \";\")]\nannotation_info\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           ENSEMBLE_ID          symbol                       id_symbol\n    1: ENSG00000000003          TSPAN6          ENSG00000000003;TSPAN6\n    2: ENSG00000000005            TNMD            ENSG00000000005;TNMD\n    3: ENSG00000000419            DPM1            ENSG00000000419;DPM1\n    4: ENSG00000000457           SCYL3           ENSG00000000457;SCYL3\n    5: ENSG00000000460        C1orf112        ENSG00000000460;C1orf112\n   ---                                                                \n62706: ENSG00000291313 ENSG00000291313 ENSG00000291313;ENSG00000291313\n62707: ENSG00000291314 ENSG00000291314 ENSG00000291314;ENSG00000291314\n62708: ENSG00000291315 ENSG00000291315 ENSG00000291315;ENSG00000291315\n62709: ENSG00000291316 ENSG00000291316 ENSG00000291316;ENSG00000291316\n62710: ENSG00000291317         TMEM276         ENSG00000291317;TMEM276\n```\n\n\n:::\n:::\n\n\n\n\n#### Create DGEList\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ndge_data <- DGEList(\n  counts = expression_raw,\n  genes = annotation_info,\n  samples = sample_info\n)\n```\n:::\n\n\n\n\n#### Save the DGEList\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nsaveRDS(\n  object = dge_data,\n  file = \"outputs/data_processed/dge_data.rds\"\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nrm(list = ls())\n```\n:::\n",
    "supporting": [
      "00-load_data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}